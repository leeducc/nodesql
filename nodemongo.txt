const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect('mongodb://localhost:27017/manaemployee', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('MongoDB connected');
  } catch (err) {
    console.error('MongoDB connection failed:', err);
    process.exit(1);
  }
};

module.exports = connectDB;



    "app.js": '''const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();

const categoryRoutes = require('./routes/categoryRoutes');
const productRoutes = require('./routes/productRoutes');

mongoose.connect('mongodb://localhost:27017/manaemployee', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log("MongoDB connected"))
  .catch(err => console.log(err));

app.use(bodyParser.json());

app.use('/api/categories', categoryRoutes);
app.use('/api/products', productRoutes);

app.listen(3000, () => {
  console.log('Server running at http://localhost:3000');
});
''',

    "models/categoryModel.js": '''const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema({
  categoryName: String,
  description: String
});

module.exports = mongoose.model('Category', categorySchema);
''',

    "models/productModel.js": '''const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  productName: String,
  price: Number,
  category: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category'
  }
});

module.exports = mongoose.model('Product', productSchema);
''',

    "controllers/categoryController.js": '''const Category = require('../models/categoryModel');

exports.getAll = async (req, res) => {
  try {
    const categories = await Category.find();
    res.json(categories);
  } catch (err) {
    res.status(500).send(err);
  }
};

exports.create = async (req, res) => {
  try {
    const category = new Category(req.body);
    await category.save();
    res.send('Category created');
  } catch (err) {
    res.status(500).send(err);
  }
};

exports.update = async (req, res) => {
  try {
    await Category.findByIdAndUpdate(req.params.id, req.body);
    res.send('Category updated');
  } catch (err) {
    res.status(500).send(err);
  }
};

exports.delete = async (req, res) => {
  try {
    await Category.findByIdAndDelete(req.params.id);
    res.send('Category deleted');
  } catch (err) {
    res.status(500).send(err);
  }
};
''',

    "controllers/productController.js": '''const Product = require('../models/productModel');

exports.getAll = async (req, res) => {
  try {
    const products = await Product.find().populate('category');
    res.json(products);
  } catch (err) {
    res.status(500).send(err);
  }
};

exports.create = async (req, res) => {
  try {
    const product = new Product(req.body);
    await product.save();
    res.send('Product created');
  } catch (err) {
    res.status(500).send(err);
  }
};

exports.update = async (req, res) => {
  try {
    await Product.findByIdAndUpdate(req.params.id, req.body);
    res.send('Product updated');
  } catch (err) {
    res.status(500).send(err);
  }
};

exports.delete = async (req, res) => {
  try {
    await Product.findByIdAndDelete(req.params.id);
    res.send('Product deleted');
  } catch (err) {
    res.status(500).send(err);
  }
};

exports.search = async (req, res) => {
  const str = req.params.strsearch;
  try {
    const results = await Product.find({
      $or: [
        { productName: { $regex: str, $options: 'i' } },
        { price: { $regex: str, $options: 'i' } }
      ]
    }).populate({
      path: 'category',
      match: { categoryName: { $regex: str, $options: 'i' } }
    });
    res.json(results);
  } catch (err) {
    res.status(500).send(err);
  }
};
''',

    "routes/categoryRoutes.js": '''const express = require('express');
const router = express.Router();
const controller = require('../controllers/categoryController');

router.get('/', controller.getAll);
router.post('/', controller.create);
router.put('/:id', controller.update);
router.delete('/:id', controller.delete);

module.exports = router;
''',

    "routes/productRoutes.js": '''const express = require('express');
const router = express.Router();
const controller = require('../controllers/productController');

router.get('/', controller.getAll);
router.post('/', controller.create);
router.put('/:id', controller.update);
router.delete('/:id', controller.delete);
router.get('/search/:strsearch', controller.search);

module.exports = router;
'''
}
